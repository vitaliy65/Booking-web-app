// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  name      String
  email     String        @unique
  password  String
  bookings  Booking[]
  roomRoles RoomUserRole[]
  bookingParticipants BookingParticipant[] @relation("UserBookingParticipants") // Opposite relation field added
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model MeetingRoom {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  bookings    Booking[]
  roomRoles   RoomUserRole[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Booking {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  meetingRoom MeetingRoom @relation(fields: [meetingRoomId], references: [id])
  meetingRoomId Int
  startTime   DateTime
  endTime     DateTime
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  participants BookingParticipant[] @relation("BookingParticipants")
}

model BookingParticipant {
  id        Int      @id @default(autoincrement())
  booking   Booking  @relation("BookingParticipants", fields: [bookingId], references: [id])
  user      User     @relation("UserBookingParticipants", fields: [userId], references: [id])
  bookingId Int
  userId    Int
  joinedAt  DateTime @default(now())

  @@unique([bookingId, userId])
}

model RoomUserRole {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  meetingRoom MeetingRoom @relation(fields: [meetingRoomId], references: [id])
  meetingRoomId Int
  role        Role
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId, meetingRoomId])
}

enum Role {
  ADMIN
  USER
}
